#!/usr/local/bin/python3

from pyspark.sql.functions import trim
from pyspark.sql import SparkSession
from io import BytesIO
import boto3
from pyspark.sql import SparkSession
from pyspark import SparkContext
import configparser
import datetime
import os
import snowflake.connector
from pyspark.sql.functions import col, lit
from pyspark.sql.types import StructType, StructField, IntegerType, DateType, TimestampType, StringType
from snowflake.connector import ProgrammingError

jarPath='/Users/tati/lab/de/pipeline-user-orders/jars'
jars = [
    # spark-snowflake
    f'{jarPath}/spark-snowflake/snowflake-jdbc-3.13.10.jar',
    f'{jarPath}/spark-snowflake/spark-snowflake_2.12-2.9.2-spark_3.1.jar', # scala 2.12 + pyspark 3.1
]
os.environ['PYSPARK_SUBMIT_ARGS'] = f'--jars {",".join(jars)}  pyspark-shell'
context = SparkContext(master="local[*]", appName="readJSON")
app = SparkSession.builder.appName("myapp").getOrCreate()

parser = configparser.ConfigParser()
parser.read("../../pipeline.conf")
snowflake_username = parser.get("snowflake_credentials", "username")
snowflake_password = parser.get("snowflake_credentials", "password")
snowflake_account_name = parser.get("snowflake_credentials", "account_name")
SNOWFLAKE_SOURCE_NAME = "net.snowflake.spark.snowflake"

snow_conn = snowflake.connector.connect(
    user = snowflake_username,
    password = snowflake_password,
    account = snowflake_account_name,
    database="mydbt",
    schema="de_silver")
cur = snow_conn.cursor()


# ORDERS_EXTRACT -> FACT_ORDERS
cur.execute("""
                create table if not exists "MYDBT"."DE_GOLD"."FACT_ORDERS"(
                    sk number not null autoincrement primary key,
                    id number not null,
                    created_at datetime not null,
                    spent number not null,                    
                    id_dim_user number not null,
                    id_dim_status number not null,
                    
                    foreign key(id_dim_user) references "MYDBT"."DE_GOLD"."DIM_USERS"(sk),
                    foreign key(id_dim_status) references "MYDBT"."DE_GOLD"."DIM_STATUS"(sk)
                )
            """)
cur.execute(f"""
         insert into "MYDBT"."DE_GOLD"."FACT_ORDERS"(id, created_at, spent, id_dim_user, id_dim_status)
            select 
                orders_extract_cast.id, 
                orders_extract_cast.created_at, 
                orders_extract_cast.spent, 
                dim_users.sk, 
                dim_status.sk
            from "MYDBT"."DE_SILVER"."ORDERS_EXTRACT_CAST" orders_extract_cast            
            left join "MYDBT"."DE_GOLD"."DIM_USERS" dim_users on dim_users.id=orders_extract_cast.id_user 
            left join "MYDBT"."DE_GOLD"."DIM_STATUS" dim_status on dim_status.id=orders_extract_cast.id 
            where orders_extract_cast.updated_at is null  
        """)

cur.close()